
https://man.developpez.com/man2/socket/
https://dzone.com/articles/parallel-tcpip-socket-server-with-multi-threading
https://www.geeksforgeeks.org/socket-programming-cc/
https://www.geeksforgeeks.org/udp-server-client-implementation-c/
https://www.tutorialspoint.com/unix_sockets/what_is_socket.htm

http://sdz.tdct.org/sdz/les-sockets.html
https://www.geeksforgeeks.org/tcp-server-client-implementation-in-c/

https://stackoverflow.com/questions/8884481/exact-line-number-for-c-error
Utiliser __FILE__ et __LINE__ dans les erreurs 

define MYERR(...) do { \
    printf ("@ %s (%d): ", __FILE__, __LINE__); \
    printf (__VA_ARGS__); \
} while (0)

printf (stderr, "Blah error at %s (%d)\n", __FILE__, __LINE__);

https://www.geeksforgeeks.org/understanding-extern-keyword-in-c/




https://perso.univ-lyon1.fr/olivier.gluck/Cours/Supports/M2SIR_CS/SPAI-C1-ArchiC-S.pdf

http://tvaira.free.fr/reseaux/tp-sockets-udp.pdf

http://www.mario-konrad.ch/blog/programming/multithread/tutorial-04.html

https://dzone.com/articles/parallel-tcpip-socket-server-with-multi-threading

https://www.youtube.com/watch?v=StRqGx9ri2I

http://polaris.imag.fr/vincent.danjean/Teaching/L3_MIAGE/Projet/Sujet_MiniProjet_SR.pdf

https://perso.univ-lyon1.fr/olivier.gluck/Cours/Supports/M2SIR_CS/SPAI-TP12_Socket.pdf

https://www.axiocode.com/3-etapes-cahier-des-charges-pour-application-mobile-reussie/

https://pub.phyks.me/sdz/sdz/les-sockets.html


// Attente de la fin de tous les pthread pour finir
    while (1) {
        //Accept call creates a new socket for the incoming connection
        addr_size = sizeof serverStorage;
        newSocket = accept(serverSocket, (struct sockaddr *) &serverStorage, &addr_size);
        
        //for each client request creates a thread and assign the client request to it to process
        //so the main thread can entertain next request
        if (pthread_create(&tid[i], NULL, socketThread, &newSocket) != 0)
            printf("Failed to create thread\n");
        printf("index pthread : %d \n", i);
        if (i >= 50) { // C'est quoi cet algo de merde
            i = 0;
            while (i < 50) {
                pthread_join(tid[i++], NULL);
            }
            i = 0;
        }
